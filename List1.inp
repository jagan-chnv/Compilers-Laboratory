typedef List{
	integer a;
	List next;
}


decl
	integer in,opt;
	List Head;
	integer insert(List &H;integer a);
	void print();
	List getHead();	
    integer deleteHead(List &H);
	integer Reverse(List &H);			  
enddecl

List getHead() {
	
	begin
	return Head;
	end
}

integer insert(List &H;integer a){
	decl
		List new;
	enddecl
	begin
		new = alloc();
		new.a = a;
                new.a++;
		if(H == null) then
			H=new;
			new.next = null;
		else
			new.next = H;
			H = new;
		endif;
		return 0;
	end
}

void print(){
	decl
		List t;
                void v;
	enddecl
	begin
		t=getHead();
		
		while(t!=null) do
			write(t.a);
			t=t.next;
		endwhile;
		return v;
	end
}
		
integer deleteHead(List &H){
	decl
		List a;
	enddecl
	begin
		if(H!=null) then
			a=H.next;
			free(H);
			H=a;
		endif;
		return 0;
	end
}

integer Reverse(List &H){
	decl
		List temp,temp2;
	enddecl
	begin
		if(H!=null && H.next!=null) then
		    temp=H.next;
            
		    in=Reverse(temp);
		    H.next.next=H;
		    H.next=null;
			H=temp;
		endif;
		return 1;
	end
}

integer main(){	
	decl
		integer val,flag;
                void f;
		List t;
	enddecl
	begin
		initialize();
		Head = null;
		flag=1;
		while(flag==1) do
			read(opt);
			if(opt==1) then
				read(val);
				in=insert(Head,val);
			else
				if(opt==2) then
					f=print();
				else
					if(opt==3) then
						in=Reverse(Head);
					else
					  if(opt==4) then
					     in=deleteHead(Head);
					  else
						flag=0;
					  endif;
					endif;
				endif;
			endif;
		endwhile;
		return 9;
	end
}
