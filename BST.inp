typedef bst{
	integer a;
	bst left;
        bst right;
}

decl
	integer in,opt;
	bst Root[2];
	integer insert(bst &h;integer a);  	
	integer inOrder(bst h);			    						
enddecl

integer insert(bst &h;integer a){
	decl
		bst temp;
	enddecl
	begin
		if(h==null) then
			temp = alloc();
			temp.a = a;
			temp.left = null;
			temp.right = null;
			h=temp;
		else
			if(h.a > a) then
				if(h.left != null) then
					in=insert(h.left,a);
				else
					temp = alloc();
					temp.a=a;
					temp.left=null;
					temp.right=null;
					h.left=temp;
					
				endif;
			else
				if(h.right != null) then
					in=insert(h.right,a);
				else
					temp = alloc();
					temp.a=a;
					temp.left=null;
					temp.right=null;
					h.right=temp;

				endif;
			endif;
		endif;
		return 1;
	end
}


integer inOrder(bst h){
       
	begin
	       
		if(h!=null) then
		   
			in=inOrder(h.left);
			write(h.a);
			in=inOrder(h.right);
		endif;
		return 1;
	end
}

integer main(){	
	decl
		integer val,flag;
		
	enddecl
	begin
		initialize();
	
		flag=1;
		while(flag==1) do
			read(opt);
			if(opt==1) then
				write(-1);
				in=inOrder(Root[0]);
                                write(-1);
                                in=inOrder(Root[1]);
			else
				if(opt==2) then
				                read(val);
						in=insert(Root[0],val);
					else 
                                              if(opt==3) then
                                                    read(val);
                                                    in=insert(Root[1],val);
                                               else
						flag=0;
 					        endif;
					endif;
				endif;
		
		endwhile;
		
		return 9;
	end
}
